{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset128 HiraginoSans-W3;\f2\fnil\fcharset0 LucidaGrande;
\f3\fnil\fcharset0 AppleColorEmoji;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 const \{\
  ActionRowBuilder,\
  ButtonBuilder,\
  ButtonStyle,\
  EmbedBuilder,\
\} = require('discord.js');\
\
module.exports = \{\
  embedPages: async (client, interaction, embeds) => \{\
    const pages = \{\};\
    const getRow = (id) => \{\
      //Create the action row with buttons\
      const row = new ActionRowBuilder();\
\
      row.addComponents(\
        new ButtonBuilder()\
          .setLabel('
\f1 \uc0\u9664 
\f0 ')\
          .setCustomId('prev_embed')\
          .setStyle(ButtonStyle.Primary)\
          .setDisabled(pages[id] === 0)\
      );\
\
      row.addComponents(\
        new ButtonBuilder()\
          .setLabel('
\f2 \uc0\u9654 
\f0 ')\
          .setCustomId('next_embed')\
          .setStyle(ButtonStyle.Primary)\
          .setDisabled(pages[id] === embeds.length - 1)\
      );\
\
      // -------------- Any other custom Button (if needed) --------------\
      //   row.addComponents(\
      //     new ButtonBuilder()\
      //       .setLabel('Any label you want')\
      //       .setCustomId('custom_id')\
      //       .setStyle(ButtonStyle.AnyStyleYouWant)\
      //   );\
      // -------------- Any other custom Button (if needed) --------------\
      return row;\
    \};\
\
    const id = interaction.user.id;\
    pages[id] = pages[id] || 0;\
    let Pagemax = embeds.length;\
\
    const embed = embeds[pages[id]];\
\
    await embeds[pages[id]].setFooter(\{\
      text: `Page $\{pages[id] + 1\} from $\{Pagemax\}`,\
    \});\
\
    const replyEmbed = await interaction.reply(\{\
      embeds: [embed],\
      components: [getRow(id)],\
      ephemeral: true,\
      fetchReply: true,\
    \});\
\
    const filter = (i) => i.user.id === interaction.user.id;\
    const time = 1000 * 60 * 5;\
\
    const collector = await replyEmbed.createMessageComponentCollector(\{\
      filter,\
      time,\
    \});\
\
    collector.on('collect', async (b) => \{\
      if (!b) return;\
      if (b.customId !== 'prev_embed' && b.customId !== 'next_embed') return;\
\
      b.deferUpdate();\
\
      if (b.customId === 'prev_embed' && pages[id] > 0) \{\
        --pages[id];\
      \} else if (b.customId === 'next_embed' && pages[id] < embeds.length - 1) \{\
        ++pages[id];\
      \}\
\
      await embeds[pages[id]].setFooter(\{\
        text: `Page $\{pages[id] + 1\} of $\{Pagemax\}`,\
      \});\
\
      await interaction.editReply(\{\
        embeds: [embeds[pages[id]]],\
        components: [getRow(id)],\
        ephemeral: true,\
        fetchReply: true,\
      \});\
    \});\
\
    // -------------- Not needed --------------\
    collector.on('end', async (reason) => \{\
      if (reason === 'time') \{\
        const warningEmbed = new EmbedBuilder()\
          .setColor('Yellow')\
          .setDescription(`
\f3 \uc0\u9888 \u65039 
\f0  |  Unfortunately, the embed has expired!`);\
\
        await interaction.editReply(\{\
          embeds: [warningEmbed],\
          components: [],\
          ephemeral: true,\
        \});\
      \}\
    \});\
    // -------------- Not needed --------------\
  \},\
\};\
}